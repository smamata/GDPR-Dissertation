/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ConsentMinimalEventInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emitAccess"
      | "emitDeletion"
      | "hasConsented"
      | "setConsent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Access" | "Consent" | "Deletion"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emitAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitDeletion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasConsented",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setConsent", values: [boolean]): string;

  decodeFunctionResult(functionFragment: "emitAccess", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitDeletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasConsented",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConsent", data: BytesLike): Result;
}

export namespace AccessEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsentEvent {
  export type InputTuple = [user: AddressLike, consented: boolean];
  export type OutputTuple = [user: string, consented: boolean];
  export interface OutputObject {
    user: string;
    consented: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeletionEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConsentMinimalEvent extends BaseContract {
  connect(runner?: ContractRunner | null): ConsentMinimalEvent;
  waitForDeployment(): Promise<this>;

  interface: ConsentMinimalEventInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emitAccess: TypedContractMethod<[], [void], "nonpayable">;

  emitDeletion: TypedContractMethod<[], [void], "nonpayable">;

  hasConsented: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  setConsent: TypedContractMethod<[consented: boolean], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emitAccess"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emitDeletion"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasConsented"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setConsent"
  ): TypedContractMethod<[consented: boolean], [void], "nonpayable">;

  getEvent(
    key: "Access"
  ): TypedContractEvent<
    AccessEvent.InputTuple,
    AccessEvent.OutputTuple,
    AccessEvent.OutputObject
  >;
  getEvent(
    key: "Consent"
  ): TypedContractEvent<
    ConsentEvent.InputTuple,
    ConsentEvent.OutputTuple,
    ConsentEvent.OutputObject
  >;
  getEvent(
    key: "Deletion"
  ): TypedContractEvent<
    DeletionEvent.InputTuple,
    DeletionEvent.OutputTuple,
    DeletionEvent.OutputObject
  >;

  filters: {
    "Access(address)": TypedContractEvent<
      AccessEvent.InputTuple,
      AccessEvent.OutputTuple,
      AccessEvent.OutputObject
    >;
    Access: TypedContractEvent<
      AccessEvent.InputTuple,
      AccessEvent.OutputTuple,
      AccessEvent.OutputObject
    >;

    "Consent(address,bool)": TypedContractEvent<
      ConsentEvent.InputTuple,
      ConsentEvent.OutputTuple,
      ConsentEvent.OutputObject
    >;
    Consent: TypedContractEvent<
      ConsentEvent.InputTuple,
      ConsentEvent.OutputTuple,
      ConsentEvent.OutputObject
    >;

    "Deletion(address)": TypedContractEvent<
      DeletionEvent.InputTuple,
      DeletionEvent.OutputTuple,
      DeletionEvent.OutputObject
    >;
    Deletion: TypedContractEvent<
      DeletionEvent.InputTuple,
      DeletionEvent.OutputTuple,
      DeletionEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ConsentBasicInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accessRequestCount"
      | "deletionRequestCount"
      | "giveConsent"
      | "hasConsented"
      | "requestDataAccess"
      | "requestDeletion"
      | "revokeConsent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessRequested"
      | "ConsentUpdated"
      | "DeletionRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accessRequestCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deletionRequestCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "giveConsent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasConsented",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDataAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDeletion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConsent",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accessRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletionRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveConsent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasConsented",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDataAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDeletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeConsent",
    data: BytesLike
  ): Result;
}

export namespace AccessRequestedEvent {
  export type InputTuple = [user: AddressLike, totalRequests: BigNumberish];
  export type OutputTuple = [user: string, totalRequests: bigint];
  export interface OutputObject {
    user: string;
    totalRequests: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsentUpdatedEvent {
  export type InputTuple = [user: AddressLike, consented: boolean];
  export type OutputTuple = [user: string, consented: boolean];
  export interface OutputObject {
    user: string;
    consented: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeletionRequestedEvent {
  export type InputTuple = [user: AddressLike, totalRequests: BigNumberish];
  export type OutputTuple = [user: string, totalRequests: bigint];
  export interface OutputObject {
    user: string;
    totalRequests: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConsentBasic extends BaseContract {
  connect(runner?: ContractRunner | null): ConsentBasic;
  waitForDeployment(): Promise<this>;

  interface: ConsentBasicInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accessRequestCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  deletionRequestCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  giveConsent: TypedContractMethod<[], [void], "nonpayable">;

  hasConsented: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  requestDataAccess: TypedContractMethod<[], [void], "nonpayable">;

  requestDeletion: TypedContractMethod<[], [void], "nonpayable">;

  revokeConsent: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accessRequestCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deletionRequestCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "giveConsent"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hasConsented"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "requestDataAccess"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestDeletion"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeConsent"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AccessRequested"
  ): TypedContractEvent<
    AccessRequestedEvent.InputTuple,
    AccessRequestedEvent.OutputTuple,
    AccessRequestedEvent.OutputObject
  >;
  getEvent(
    key: "ConsentUpdated"
  ): TypedContractEvent<
    ConsentUpdatedEvent.InputTuple,
    ConsentUpdatedEvent.OutputTuple,
    ConsentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeletionRequested"
  ): TypedContractEvent<
    DeletionRequestedEvent.InputTuple,
    DeletionRequestedEvent.OutputTuple,
    DeletionRequestedEvent.OutputObject
  >;

  filters: {
    "AccessRequested(address,uint256)": TypedContractEvent<
      AccessRequestedEvent.InputTuple,
      AccessRequestedEvent.OutputTuple,
      AccessRequestedEvent.OutputObject
    >;
    AccessRequested: TypedContractEvent<
      AccessRequestedEvent.InputTuple,
      AccessRequestedEvent.OutputTuple,
      AccessRequestedEvent.OutputObject
    >;

    "ConsentUpdated(address,bool)": TypedContractEvent<
      ConsentUpdatedEvent.InputTuple,
      ConsentUpdatedEvent.OutputTuple,
      ConsentUpdatedEvent.OutputObject
    >;
    ConsentUpdated: TypedContractEvent<
      ConsentUpdatedEvent.InputTuple,
      ConsentUpdatedEvent.OutputTuple,
      ConsentUpdatedEvent.OutputObject
    >;

    "DeletionRequested(address,uint256)": TypedContractEvent<
      DeletionRequestedEvent.InputTuple,
      DeletionRequestedEvent.OutputTuple,
      DeletionRequestedEvent.OutputObject
    >;
    DeletionRequested: TypedContractEvent<
      DeletionRequestedEvent.InputTuple,
      DeletionRequestedEvent.OutputTuple,
      DeletionRequestedEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  ConsentMinimalEvent,
  ConsentMinimalEventInterface,
} from "../ConsentMinimalEvent";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "Access",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "consented",
        type: "bool",
      },
    ],
    name: "Consent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "Deletion",
    type: "event",
  },
  {
    inputs: [],
    name: "emitAccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "emitDeletion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "hasConsented",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "consented",
        type: "bool",
      },
    ],
    name: "setConsent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063071db8141461005157806341c5308714610091578063b707f3711461009b578063efb2cc80146100ae575b600080fd5b61007d61005f366004610163565b6001600160a01b031660009081526020819052604090205460ff1690565b604051901515815260200160405180910390f35b6100996100b6565b005b6100996100a9366004610193565b6100e3565b610099610136565b60405133907fbb8ac28fd5774540480c112eb8ed284f379072c4e4be5c0f663accdd4a93a7a890600090a2565b3360008181526020818152604091829020805460ff191685151590811790915591519182527f3bdbf1112f4c66b1ef3d3103f574f8d68ae4caffe3aa390945ff1af928e72fe8910160405180910390a250565b60405133907fc402296a31836a77c00eb83e0115f7adfa1ff52a2b793a9da0a25a04c4bc37e990600090a2565b60006020828403121561017557600080fd5b81356001600160a01b038116811461018c57600080fd5b9392505050565b6000602082840312156101a557600080fd5b8135801515811461018c57600080fdfea26469706673582212205031a5bfe8fecc5af48e4b7cc34bc2649a3ab589967b2b7d94da4aaea796b31e64736f6c63430008180033";

type ConsentMinimalEventConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConsentMinimalEventConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConsentMinimalEvent__factory extends ContractFactory {
  constructor(...args: ConsentMinimalEventConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ConsentMinimalEvent & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ConsentMinimalEvent__factory {
    return super.connect(runner) as ConsentMinimalEvent__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConsentMinimalEventInterface {
    return new Interface(_abi) as ConsentMinimalEventInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ConsentMinimalEvent {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ConsentMinimalEvent;
  }
}

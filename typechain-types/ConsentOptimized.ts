/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ConsentOptimizedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchRecordAccess"
      | "batchRecordDeletion"
      | "getUserState"
      | "setConsent"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AccessBatch" | "ConsentUpdated" | "DeletionBatch"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchRecordAccess",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchRecordDeletion",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setConsent", values: [boolean]): string;

  decodeFunctionResult(
    functionFragment: "batchRecordAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchRecordDeletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConsent", data: BytesLike): Result;
}

export namespace AccessBatchEvent {
  export type InputTuple = [caller: AddressLike, usersProcessed: BigNumberish];
  export type OutputTuple = [caller: string, usersProcessed: bigint];
  export interface OutputObject {
    caller: string;
    usersProcessed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsentUpdatedEvent {
  export type InputTuple = [user: AddressLike, consented: boolean];
  export type OutputTuple = [user: string, consented: boolean];
  export interface OutputObject {
    user: string;
    consented: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeletionBatchEvent {
  export type InputTuple = [caller: AddressLike, usersProcessed: BigNumberish];
  export type OutputTuple = [caller: string, usersProcessed: bigint];
  export interface OutputObject {
    caller: string;
    usersProcessed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConsentOptimized extends BaseContract {
  connect(runner?: ContractRunner | null): ConsentOptimized;
  waitForDeployment(): Promise<this>;

  interface: ConsentOptimizedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchRecordAccess: TypedContractMethod<
    [users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  batchRecordDeletion: TypedContractMethod<
    [users: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getUserState: TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, bigint, bigint] & {
        consent: boolean;
        accessCount: bigint;
        deletionCount: bigint;
      }
    ],
    "view"
  >;

  setConsent: TypedContractMethod<[consented: boolean], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchRecordAccess"
  ): TypedContractMethod<[users: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchRecordDeletion"
  ): TypedContractMethod<[users: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getUserState"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, bigint, bigint] & {
        consent: boolean;
        accessCount: bigint;
        deletionCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setConsent"
  ): TypedContractMethod<[consented: boolean], [void], "nonpayable">;

  getEvent(
    key: "AccessBatch"
  ): TypedContractEvent<
    AccessBatchEvent.InputTuple,
    AccessBatchEvent.OutputTuple,
    AccessBatchEvent.OutputObject
  >;
  getEvent(
    key: "ConsentUpdated"
  ): TypedContractEvent<
    ConsentUpdatedEvent.InputTuple,
    ConsentUpdatedEvent.OutputTuple,
    ConsentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DeletionBatch"
  ): TypedContractEvent<
    DeletionBatchEvent.InputTuple,
    DeletionBatchEvent.OutputTuple,
    DeletionBatchEvent.OutputObject
  >;

  filters: {
    "AccessBatch(address,uint256)": TypedContractEvent<
      AccessBatchEvent.InputTuple,
      AccessBatchEvent.OutputTuple,
      AccessBatchEvent.OutputObject
    >;
    AccessBatch: TypedContractEvent<
      AccessBatchEvent.InputTuple,
      AccessBatchEvent.OutputTuple,
      AccessBatchEvent.OutputObject
    >;

    "ConsentUpdated(address,bool)": TypedContractEvent<
      ConsentUpdatedEvent.InputTuple,
      ConsentUpdatedEvent.OutputTuple,
      ConsentUpdatedEvent.OutputObject
    >;
    ConsentUpdated: TypedContractEvent<
      ConsentUpdatedEvent.InputTuple,
      ConsentUpdatedEvent.OutputTuple,
      ConsentUpdatedEvent.OutputObject
    >;

    "DeletionBatch(address,uint256)": TypedContractEvent<
      DeletionBatchEvent.InputTuple,
      DeletionBatchEvent.OutputTuple,
      DeletionBatchEvent.OutputObject
    >;
    DeletionBatch: TypedContractEvent<
      DeletionBatchEvent.InputTuple,
      DeletionBatchEvent.OutputTuple,
      DeletionBatchEvent.OutputObject
    >;
  };
}
